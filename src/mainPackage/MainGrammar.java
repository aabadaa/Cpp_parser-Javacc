/* Generated By:JavaCC: Do not edit this line. MainGrammar.java */
package mainPackage;
import NodePackage.*;
import priority.*;
import utils.*;

public class MainGrammar implements MainGrammarConstants {
  public static void main(String args []) throws ParseException, java.io.FileNotFoundException
  {
    MainGrammar parser = new MainGrammar(
    new java.io.FileInputStream("src/test2 switch")
    );
    AbstractTreeNode n = start();
    TreePrinter.print(n);
    if (n.execute(new Context()) instanceof JumpStmt)
    throw new RuntimeException("encountered jump statement outside loops or switch");
    // printer.print();
  }

  static int space = 0;

  public static void print(String x)
  {
    String out = "";
    for (int i = 0; i < space; i++)
    out += " ";
    System.out.println(out + x);
  }

  public static void inc()
  {
    space += 3;
  }

  public static void dec()
  {
    space -= 3;
  }

  static final public BlockNode start() throws ParseException {
  BlockNode n = new BlockNode();
  AbstractTreeNode c;
    print("Start");
    label_1:
    while (true) {
      c = stmt();
      n.addChild(c);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case If:
      case FOR:
      case WHILE:
      case DO:
      case SWITCH:
      case BREAK:
      case CONTINUE:
      case CIN:
      case COUT:
      case Id:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
    System.out.println("Tree was built successfully!");
    print("end");
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public AbstractTreeNode stmt() throws ParseException {
  AbstractTreeNode n;
    inc();
    print("start stmt");
    if (jj_2_1(2)) {
      n = assignSequence();
      jj_consume_token(Semicolon);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Id:
        n = declarationStmt();
        jj_consume_token(Semicolon);
        break;
      case If:
        n = ifStmt();
        break;
      case WHILE:
        n = whileStmt();
        break;
      case DO:
        n = doWhileStmt();
        break;
      case SWITCH:
        n = switchStmt();
        break;
      case BREAK:
      case CONTINUE:
        n = jumpStmt();
        break;
      case FOR:
        n = forStmt();
        break;
      case CIN:
        n = CinStmt();
        break;
      case COUT:
        n = CoutStmt();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    print("end stmt");
    dec();
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public BlockNode block() throws ParseException {
  BlockNode res = new BlockNode();
  AbstractTreeNode statement;
    print("start block");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LeftBrace:
      jj_consume_token(LeftBrace);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case If:
        case FOR:
        case WHILE:
        case DO:
        case SWITCH:
        case BREAK:
        case CONTINUE:
        case CIN:
        case COUT:
        case Id:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        statement = stmt();
          res.addChild(statement);
      }
      jj_consume_token(RightBrace);
      break;
    case If:
    case FOR:
    case WHILE:
    case DO:
    case SWITCH:
    case BREAK:
    case CONTINUE:
    case CIN:
    case COUT:
    case Id:
      statement = stmt();
      res.addChild(statement);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    print("end block");
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public CoutNode CoutStmt() throws ParseException {
  CoutNode res = new CoutNode();
  AbstractTreeNode output = null;
    print("start CoutStmt");
    inc();
    jj_consume_token(COUT);
    label_3:
    while (true) {
      jj_consume_token(OUTPUTBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE_VALUE:
      case BOOLEAN_VALUE:
      case STR:
      case CHAR_VALUE:
      case PLUS:
      case MINUS:
      case NOT:
      case Id:
        output = expression();
        break;
      case ENDLINE:
        jj_consume_token(ENDLINE);
          output = new EndlNode();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        res.addChild(output);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUTPUTBRACE:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(Semicolon);
    print("end CoutStmt");
    dec();
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public CinNode CinStmt() throws ParseException {
  CinNode res = new CinNode();
  Token t;
    print("start CinStmt");
    inc();
    jj_consume_token(CIN);
    label_4:
    while (true) {
      jj_consume_token(INPUTBRACE);
      t = jj_consume_token(Id);
        res.vars.add(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INPUTBRACE:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
    }
    jj_consume_token(Semicolon);
    print("end CinStmt");
    dec();
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public IfNode ifStmt() throws ParseException {
  IfNode res = new IfNode();
  AbstractTreeNode n, nn;
    print("start ifStmt");
    inc();
    jj_consume_token(If);
    jj_consume_token(LeftParenthesis);
    n = expression();
    jj_consume_token(RightParenthesis);
    nn = block();
      res.addChild(n);
      res.addChild(nn);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Else:
      jj_consume_token(Else);
      nn = block();
        res.addChild(nn);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    print("end ifStmt");
    dec();
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public WhileNode whileStmt() throws ParseException {
  WhileNode res = new WhileNode();
  AbstractTreeNode cond, bl;
    inc();
    print("start whileStmt");
    jj_consume_token(WHILE);
    jj_consume_token(LeftParenthesis);
    cond = expression();
    jj_consume_token(RightParenthesis);
    bl = block();
    res.addChild(cond);
    res.addChild(bl);
    print("end whileStmt");
    dec();
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public DoWhileNode doWhileStmt() throws ParseException {
  DoWhileNode res = new DoWhileNode();
  AbstractTreeNode cond, block;
    inc();
    print("start doWhileStmt");
    jj_consume_token(DO);
    block = block();
    jj_consume_token(WHILE);
    jj_consume_token(LeftParenthesis);
    cond = expression();
    jj_consume_token(RightParenthesis);
    jj_consume_token(Semicolon);
    res.addChild(block);
    res.addChild(cond);
    print("end doWhileStmt");
    dec();
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public ForNode forStmt() throws ParseException {
  ForNode res = new ForNode();
  AbstractTreeNode cond = null, bl, ass1 = null, ass2 = null;
    inc();
    print("start forStmt");
    jj_consume_token(FOR);
    jj_consume_token(LeftParenthesis);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Id:
      if (jj_2_2(2)) {
        ass1 = assignSequence();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Id:
          ass1 = declarationStmt();
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(Semicolon);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLE_VALUE:
    case BOOLEAN_VALUE:
    case STR:
    case CHAR_VALUE:
    case PLUS:
    case MINUS:
    case NOT:
    case Id:
      cond = expression();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(Semicolon);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Id:
      ass2 = assignSequence();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(RightParenthesis);
    bl = block();
    if (ass1 == null)
    ass1 = new EmptyNode();
    if (cond == null)
    cond = new EmptyNode();
    if (ass2 == null)
    ass2 = new EmptyNode();
    res.addChild(ass1);
    res.addChild(cond);
    res.addChild(ass2);
    res.addChild(bl);
    print("end forStmt");
    dec();
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public BlockNode blockwithout() throws ParseException {
  BlockNode res = new BlockNode();
  AbstractTreeNode statement;
    print("start blockwithout");
    inc();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case If:
    case FOR:
    case WHILE:
    case DO:
    case SWITCH:
    case BREAK:
    case CONTINUE:
    case CIN:
    case COUT:
    case Id:
      label_5:
      while (true) {
        statement = stmt();
        res.addChild(statement);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case If:
        case FOR:
        case WHILE:
        case DO:
        case SWITCH:
        case BREAK:
        case CONTINUE:
        case CIN:
        case COUT:
        case Id:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_5;
        }
      }
      break;
    case LeftBrace:
      jj_consume_token(LeftBrace);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case If:
        case FOR:
        case WHILE:
        case DO:
        case SWITCH:
        case BREAK:
        case CONTINUE:
        case CIN:
        case COUT:
        case Id:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_6;
        }
        statement = stmt();
          res.addChild(statement);
      }
      jj_consume_token(RightBrace);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    print("end blockwithout");
    dec();
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public SwitchNode switchStmt() throws ParseException {
  SwitchNode res = new SwitchNode();
  AbstractTreeNode ns, nns, nnns;
    print("start switchStmt");
    inc();
    nns = new CaseNode();
    nnns = new DefaultNode();
    jj_consume_token(SWITCH);
    jj_consume_token(LeftParenthesis);
    ns = expression();
    jj_consume_token(RightParenthesis);
    jj_consume_token(LeftBrace);
    res.addChild(ns);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_7;
      }
      nns = caseStmt();
        res.addChild(nns);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      nnns = defaultStmt();
        res.addChild(nnns);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_8;
      }
      nns = caseStmt();
        res.addChild(nns);
    }
    jj_consume_token(RightBrace);
    print("end switchStmt");
    dec();
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public CaseNode caseStmt() throws ParseException {
  CaseNode res = new CaseNode();
  AbstractTreeNode nc, nnc;
  nc = null;
  nnc = null;
    print("start caseStmt");
    inc();
    jj_consume_token(CASE);
    nc = expression();
    jj_consume_token(TP);
    res.addChild(nc);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case If:
    case FOR:
    case WHILE:
    case DO:
    case SWITCH:
    case BREAK:
    case CONTINUE:
    case LeftBrace:
    case CIN:
    case COUT:
    case Id:
      nnc = blockwithout();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    res.addChild(nnc);
    print("end caseStmt");
    dec();
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public DefaultNode defaultStmt() throws ParseException {
  DefaultNode res = new DefaultNode();
  AbstractTreeNode nd;
  nd = null;
    print("start defaultStmt");
    inc();
    jj_consume_token(DEF);
    jj_consume_token(TP);
    nd = blockwithout();
      res.addChild(nd);
    print("end defaultStmt");
    dec();
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public JumpStmtNode jumpStmt() throws ParseException {
  Token t = null;
    inc();
    print("start jumpStmt");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
      t = jj_consume_token(BREAK);
      break;
    case CONTINUE:
      t = jj_consume_token(CONTINUE);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(Semicolon);
    JumpStmtNode out = new JumpStmtNode(JumpStmt.valueOf(t.image.toUpperCase()));
    print("end jumpStmt");
    dec();
    {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  static final public BlockNode assignSequence() throws ParseException {
  BlockNode block = new BlockNode();
  AssignNode assign = null;
    inc();
    print("start assignSequence");
    assign = assignStmt();
    block.addChild(assign);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMA);
      assign = assignStmt();
      block.addChild(assign);
    }
    print("end assignSequence");
    dec();
    {if (true) return block;}
    throw new Error("Missing return statement in function");
  }

  static final public AssignNode assignStmt() throws ParseException {
  Token t, op;
  AssignNode anode = new AssignNode();
  AbstractTreeNode n;
    inc();
    print("start assignStmt");
    t = jj_consume_token(Id);
    op = jj_consume_token(Assignment);
    n = expression();
    anode.setVar(t.image);
    anode.setOperator(op.image);
    anode.addChild(n);
    print("end assignStmt");
    dec();
    {if (true) return anode;}
    throw new Error("Missing return statement in function");
  }

  static final public ConstantNode constant() throws ParseException {
  ConstantNode cn = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STR:
      cn = strConstant();
      break;
    case CHAR_VALUE:
      cn = charConstant();
      break;
    case DOUBLE_VALUE:
      cn = doubleConstant();
      break;
    case BOOLEAN_VALUE:
      cn = boolConstant();
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return cn;}
    throw new Error("Missing return statement in function");
  }

  static final public ConstantNode doubleConstant() throws ParseException {
  Token t1;
  ConstantNode cn = new ConstantNode();
    t1 = jj_consume_token(DOUBLE_VALUE);
    print("constant double ");
    cn.setValue(new Value("double", Double.parseDouble(t1.image)));
    {if (true) return cn;}
    throw new Error("Missing return statement in function");
  }

  static final public ConstantNode charConstant() throws ParseException {
  Token t1;
  ConstantNode cn = new ConstantNode();
    t1 = jj_consume_token(CHAR_VALUE);
    print("constant char ");
    cn.setValue(new Value("char", t1.image.charAt(1)));
    {if (true) return cn;}
    throw new Error("Missing return statement in function");
  }

  static final public ConstantNode boolConstant() throws ParseException {
  Token t1;
  ConstantNode cn = new ConstantNode();
    t1 = jj_consume_token(BOOLEAN_VALUE);
    print("constant bool");
    cn.setValue(new Value("bool", t1.image.equals("true")));
    {if (true) return cn;}
    throw new Error("Missing return statement in function");
  }

  static final public ConstantNode strConstant() throws ParseException {
  Token t1;
  ConstantNode cn = new ConstantNode();
    t1 = jj_consume_token(STR);
    int start = 1, end = t1.image.length() - 1;
    String value = t1.image.substring(start, end);
    print("constant string ");
    cn.setValue(new Value("string", value));
    {if (true) return cn;}
    throw new Error("Missing return statement in function");
  }

  static final public VariableNode var() throws ParseException {
  Token t1;
    t1 = jj_consume_token(Id);
    VariableNode cn = new VariableNode();
    cn.setValue(t1.image);
    print("variableNode node " + t1.image);
    {if (true) return cn;}
    throw new Error("Missing return statement in function");
  }

  static final public AbstractTreeNode zero_priority() throws ParseException {
  AbstractTreeNode res;
  UnaryNode unary = null;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case NOT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case NOT:
        t = jj_consume_token(NOT);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      unary = new UnaryNode();
      unary.setOperator(t.image);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLE_VALUE:
    case BOOLEAN_VALUE:
    case STR:
    case CHAR_VALUE:
      res = constant();
      break;
    case Id:
      res = var();
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (unary != null)
    unary.addChild(res);
    {if (true) return unary == null ? res : unary;}
    throw new Error("Missing return statement in function");
  }

  static final public AbstractTreeNode expression() throws ParseException {
  AbstractTreeNode op1 = null, op2 = null;
  LogicalNode logical = new LogicalNode();
  Token t = null;
    inc();
    print("expression start");
    op1 = third_priority();
      logical.addChild(op1);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        t = jj_consume_token(AND);
        break;
      case OR:
        t = jj_consume_token(OR);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      op2 = third_priority();
        logical.addChild(op2);
        logical.addOperator(t.image);
    }
    print("expression end");
    dec();
    {if (true) return t == null ? op1 : logical;}
    throw new Error("Missing return statement in function");
  }

  static final public AbstractTreeNode third_priority() throws ParseException {
  AbstractTreeNode operand1 = null, operand2 = null;
  ComparatorNode node = new ComparatorNode();
  Token t = null;
    inc();
    print("third_priority start");
    operand1 = second_priority();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Compare:
      t = jj_consume_token(Compare);
      operand2 = second_priority();
        node.addChild(operand1);
        node.addChild(operand2);
        node.setOperator(t.image);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    print("third_priority end");
    dec();
    {if (true) return t == null ? operand1 : node;}
    throw new Error("Missing return statement in function");
  }

  static final public AbstractTreeNode second_priority() throws ParseException {
  AbstractTreeNode value = null, value2 = null;
  SecondPriorityNode math = new SecondPriorityNode();
  Token operator = null;
    inc();
    print("second priority start");
    value = first_priority();
      math.addChild(value);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        operator = jj_consume_token(PLUS);
        break;
      case MINUS:
        operator = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      value2 = first_priority();
        math.addOperator(operator.image);
        math.addChild(value2);
    }
    print("second priority end");
    dec();
    {if (true) return operator == null ? value : math;}
    throw new Error("Missing return statement in function");
  }

  static final public AbstractTreeNode first_priority() throws ParseException {
  FirstPriorityNode math = new FirstPriorityNode();
  AbstractTreeNode value1 = null, value2 = null;
  Token operator = null;
    inc();
    print("first priority start");
    value1 = zero_priority();
      math.addChild(value1);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Mulp:
      case DIV:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Mulp:
        operator = jj_consume_token(Mulp);
        break;
      case DIV:
        operator = jj_consume_token(DIV);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      value2 = zero_priority();
        math.addOperator(operator.image);
        math.addChild(value2);
    }
    print("first priority end");
    dec();
    {if (true) return operator == null ? value1 : math;}
    throw new Error("Missing return statement in function");
  }

  static final public DeclarationNode declarationStmt() throws ParseException {
  Token type = null, varName = null;
  DeclarationNode out = new DeclarationNode();
  AbstractTreeNode value = null;
    inc();
    print("start Declaration");
    type = jj_consume_token(Id);
      out.setType(type.image);
    varName = jj_consume_token(Id);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Assignment:
      jj_consume_token(Assignment);
      value = expression();
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
      out.addVar(varName.image, value);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_13;
      }
      jj_consume_token(COMA);
      varName = jj_consume_token(Id);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Assignment:
        jj_consume_token(Assignment);
        value = expression();
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
        out.addVar(varName.image, value);
        value = null; //set value to null to prevent pass value to the next variable

    }
    print("end Declaration");
    dec();
    {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(Id)) return true;
    if (jj_scan_token(Assignment)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MainGrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[35];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xcf800000,0xcf800000,0xcf800000,0xcf800000,0x103b80,0x0,0x0,0x0,0x0,0x0,0x103b80,0x0,0xcf800000,0xcf800000,0xcf800000,0x10000000,0x20000000,0x10000000,0xcf800000,0xc0000000,0x0,0xb80,0x103000,0x103000,0xb80,0xc0000,0xc0000,0x0,0x3000,0x3000,0xc000,0xc000,0x20000,0x0,0x20000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4600,0x4600,0x4600,0x4640,0x6000,0x1000,0x800,0x1,0x4000,0x4000,0x4000,0x4000,0x4600,0x4600,0x4640,0x0,0x0,0x0,0x4640,0x0,0x8,0x0,0x0,0x0,0x4000,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x8,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MainGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MainGrammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MainGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MainGrammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MainGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MainGrammar(MainGrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MainGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[47];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 35; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
